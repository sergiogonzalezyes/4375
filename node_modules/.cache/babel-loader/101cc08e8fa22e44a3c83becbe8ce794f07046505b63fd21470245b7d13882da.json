{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// store/app.js\n// import router \nimport router from '@/router';\nexport default {\n  namespaced: true,\n  // Ensure the module is namespaced\n  state: {\n    isAuthenticated: false,\n    username: '',\n    role: '',\n    logoutTimer: null\n  },\n  mutations: {\n    setAuthenticated(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    setUsername(state, username) {\n      state.username = username;\n    },\n    setRole(state, role) {\n      state.role = role;\n    },\n    setLogoutTimer(state, timer) {\n      state.logoutTimer = timer;\n    }\n  },\n  actions: {\n    login({\n      commit\n    }, {\n      username,\n      password\n    }) {\n      const hardcodedUsername = 'admin';\n      const hardcodedPassword = 'admin';\n      const hardcodedGuestUsername = 'guest';\n      const hardcodedGuestPassword = 'guest';\n      const hardcodedCustomerUsername = 'customer';\n      const hardcodedCustomerPassword = 'customer';\n      if (username === hardcodedUsername && password === hardcodedPassword) {\n        console.log('user logged in successfully');\n        commit('setAuthenticated', true);\n        commit('setUsername', username);\n        commit('setRole', 'admin');\n        localStorage.setItem('userIsAuthenticated', 'true');\n      } else if (username === hardcodedGuestUsername && password === hardcodedGuestPassword) {\n        commit('setAuthenticated', true);\n        commit('setUsername', username);\n        commit('setRole', 'guest');\n        localStorage.setItem('userIsAuthenticated', 'true');\n      } else if (username === hardcodedCustomerUsername && password === hardcodedCustomerPassword) {\n        commit('setAuthenticated', true);\n        commit('setUsername', username);\n        commit('setRole', 'customer');\n        localStorage.setItem('userIsAuthenticated', 'true');\n      }\n\n      // Set the timer to log out after 2 minutes\n      const logoutTimer = setTimeout(() => {\n        commit('setLogoutTimer', null);\n        this.dispatch('logout');\n      }, 2 * 60 * 1000); // 2 minutes\n\n      commit('setLogoutTimer', logoutTimer);\n      router.push('/dashboard');\n    },\n    logout({\n      commit\n    }) {\n      commit('setAuthenticated', false);\n      commit('setUsername', '');\n      commit('setRole', '');\n      localStorage.removeItem('userIsAuthenticated');\n\n      // Clear the logout timer if it's set\n      const logoutTimer = this.state.logoutTimer;\n      if (logoutTimer) {\n        clearTimeout(logoutTimer);\n        commit('setLogoutTimer', null);\n      }\n    }\n  }\n};","map":{"version":3,"names":["router","namespaced","state","isAuthenticated","username","role","logoutTimer","mutations","setAuthenticated","setUsername","setRole","setLogoutTimer","timer","actions","login","commit","password","hardcodedUsername","hardcodedPassword","hardcodedGuestUsername","hardcodedGuestPassword","hardcodedCustomerUsername","hardcodedCustomerPassword","console","log","localStorage","setItem","setTimeout","dispatch","push","logout","removeItem","clearTimeout"],"sources":["/Users/sergiogonzalez/Desktop/test/frontend/src/store/app.js"],"sourcesContent":["// store/app.js\n// import router \nimport router from '@/router';\n\nexport default {\n  namespaced: true, // Ensure the module is namespaced\n  state: {\n    isAuthenticated: false,\n    username: '',\n    role: '',\n    logoutTimer: null,\n  },\n  mutations: {\n      setAuthenticated(state, isAuthenticated) {\n        state.isAuthenticated = isAuthenticated;\n      },\n      setUsername(state, username) {\n        state.username = username;\n      },\n      setRole(state, role) {\n        state.role = role;\n      },\n      setLogoutTimer(state, timer) {\n        state.logoutTimer = timer;\n      },\n  },\n  actions: {\n    login({ commit }, { username, password }) {\n\n      const hardcodedUsername = 'admin';\n      const hardcodedPassword = 'admin';\n\n      const hardcodedGuestUsername = 'guest';\n      const hardcodedGuestPassword = 'guest';\n\n      const hardcodedCustomerUsername = 'customer';\n      const hardcodedCustomerPassword = 'customer';\n\n\n      if (username === hardcodedUsername && password === hardcodedPassword) {\n        console.log('user logged in successfully')\n        commit('setAuthenticated', true);\n        commit('setUsername', username);\n        commit('setRole', 'admin');\n        localStorage.setItem('userIsAuthenticated', 'true');\n      } else if (username === hardcodedGuestUsername && password === hardcodedGuestPassword) {\n        commit('setAuthenticated', true);\n        commit('setUsername', username);\n        commit('setRole', 'guest');\n        localStorage.setItem('userIsAuthenticated', 'true');\n      }\n      else if (username === hardcodedCustomerUsername && password === hardcodedCustomerPassword) {\n        commit('setAuthenticated', true);\n        commit('setUsername', username);\n        commit('setRole', 'customer');\n        localStorage.setItem('userIsAuthenticated', 'true');\n      }\n\n      // Set the timer to log out after 2 minutes\n      const logoutTimer = setTimeout(() => {\n        commit('setLogoutTimer', null);\n        this.dispatch('logout');\n      }, 2 * 60 * 1000); // 2 minutes\n\n      commit('setLogoutTimer', logoutTimer);\n      router.push('/dashboard');\n    },\n    logout({ commit }) {\n      commit('setAuthenticated', false);\n      commit('setUsername', '');\n      commit('setRole', '');\n      localStorage.removeItem('userIsAuthenticated');\n\n      // Clear the logout timer if it's set\n      const logoutTimer = this.state.logoutTimer;\n      if (logoutTimer) {\n        clearTimeout(logoutTimer);\n        commit('setLogoutTimer', null);\n      }\n    },\n  },\n};\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}