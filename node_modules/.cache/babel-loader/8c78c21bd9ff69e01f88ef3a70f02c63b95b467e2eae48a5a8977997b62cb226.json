{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      drawer: false,\n      links: [{\n        name: 'Home',\n        path: '/home'\n      }, {\n        name: 'Notifications',\n        path: '/notifications',\n        requiresAuth: true\n      }, {\n        name: 'Profile',\n        path: '/profile',\n        requiresAuth: true,\n        roles: ['admin', 'customer', 'barber']\n      }],\n      isSmallScreen: false // Initial state\n    };\n  },\n\n  created() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  destroyed() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      this.isSmallScreen = window.innerWidth < 600;\n    },\n    handleAuthAction() {\n      if (this.isAuthenticated) {\n        this.$store.dispatch('app/logout').then(() => {\n          this.$router.push('/login').catch(err => {\n            if (err.name !== 'NavigationDuplicated') throw err;\n          });\n        });\n      } else {\n        this.$router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') throw err;\n        });\n      }\n    }\n  },\n  computed: {\n    isAuthenticated() {\n      return this.$store.state.app.isAuthenticated;\n    },\n    username() {\n      return this.$store.state.app.username;\n    },\n    isLoginPage() {\n      return this.$route.path === '/login';\n    },\n    // Compute the links to be shown based on authentication and role\n    filteredLinks() {\n      return this.links.filter(link => {\n        if (link.requiresAuth && !this.isAuthenticated) return false;\n        if (link.requiresGuest && this.isAuthenticated) return false;\n        if (link.roles && !link.roles.includes(this.$store.state.app.role)) return false;\n        return true;\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","drawer","links","name","path","requiresAuth","roles","isSmallScreen","created","window","addEventListener","handleResize","destroyed","removeEventListener","methods","innerWidth","handleAuthAction","isAuthenticated","$store","dispatch","then","$router","push","catch","err","computed","state","app","username","isLoginPage","$route","filteredLinks","filter","link","requiresGuest","includes","role"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <v-app id=\"app\">\n    <!-- AppBar -->\n    <v-app-bar app flat v-if=\"!isLoginPage\">\n      <!-- Menu for Small Screens -->\n      <v-menu offset-y v-if=\"isSmallScreen\">\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\n            <v-icon>mdi-menu</v-icon>\n          </v-btn>\n        </template>\n        <v-list>\n          <!-- Dynamic links -->\n          <router-link v-for=\"link in filteredLinks\" :key=\"link.name\" :to=\"link.path\">\n            <v-list-item link>\n              <v-list-item-title>{{ link.name }}</v-list-item-title>\n            </v-list-item>\n          </router-link>\n          <v-divider class=\"my-2\"></v-divider>\n          <v-list-item @click=\"handleAuthAction\">\n            <v-list-item-title>\n              {{ isAuthenticated ? 'Logout' : 'Login' }}\n            </v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n\n      <!-- Icon for Large Screens -->\n      <v-app-bar-nav-icon @click=\"drawer = !drawer\" v-else></v-app-bar-nav-icon>\n\n      <v-container class=\"mx-auto d-flex align-center justify-center\">\n        <!-- Conditional greeting based on logged-in user -->\n        <span class=\"me-4\" v-if=\"isAuthenticated\">\n          Hello, {{ username }}!\n        </span>\n        <!-- Optional: Default message for not logged in users -->\n        <span class=\"me-4\" v-else>\n          Welcome!\n        </span>\n      </v-container>\n    </v-app-bar>\n\n    <!-- Sidebar Navigation (Drawer) for Large Screens -->\n    <v-navigation-drawer v-model=\"drawer\" app v-if=\"!isSmallScreen && !isLoginPage\">\n      <v-list :rounded=\"true\">\n        <!-- Dynamic links -->\n        <router-link v-for=\"link in filteredLinks\" :key=\"link.name\" :to=\"link.path\">\n          <v-list-item link>\n            {{ link.name }}\n          </v-list-item>\n        </router-link>\n        <v-divider class=\"my-2\"></v-divider>\n        <v-list-item @click=\"handleAuthAction\">\n          {{ isAuthenticated ? 'Logout' : 'Login' }}\n        </v-list-item>\n      </v-list>\n    </v-navigation-drawer>\n\n    <!-- Main Content -->\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <router-view></router-view>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n\n<script>\nexport default {\n  data() {\n    return {\n      drawer: false,\n      links: [\n        { name: 'Home', path: '/home' },\n        { name: 'Notifications', path: '/notifications', requiresAuth: true , },\n        { name: 'Profile', path: '/profile', requiresAuth: true, roles: ['admin', 'customer', 'barber'] },\n      ],\n      isSmallScreen: false, // Initial state\n    };\n  },\n  created() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  destroyed() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      this.isSmallScreen = window.innerWidth < 600;\n    },\n    handleAuthAction() {\n      if (this.isAuthenticated) {\n        this.$store.dispatch('app/logout')\n          .then(() => {\n            this.$router.push('/login')\n              .catch(err => {\n                if (err.name !== 'NavigationDuplicated') throw err;\n              });\n          });\n      } else {\n        this.$router.push('/login')\n          .catch(err => {\n            if (err.name !== 'NavigationDuplicated') throw err;\n          });\n      }\n    },\n  },\n  computed: {\n    isAuthenticated() {\n      return this.$store.state.app.isAuthenticated;\n    },\n    username() {\n      return this.$store.state.app.username;\n    },\n    isLoginPage() {\n      return this.$route.path === '/login';\n    },\n    // Compute the links to be shown based on authentication and role\n    filteredLinks() {\n      return this.links.filter(link => {\n        if (link.requiresAuth && !this.isAuthenticated) return false;\n        if (link.requiresGuest && this.isAuthenticated) return false;\n        if (link.roles && !link.roles.includes(this.$store.state.app.role)) return false;\n        return true;\n      });\n    }\n  },\n};\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":";AAqEA;EACAA,KAAA;IACA;MACAC,MAAA;MACAC,KAAA,GACA;QAAAC,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;QAAAC,YAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,YAAA;QAAAC,KAAA;MAAA,EACA;MACAC,aAAA;IACA;EACA;;EACAC,QAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;IACA,KAAAA,YAAA;EACA;EACAC,UAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,YAAA;EACA;EACAG,OAAA;IACAH,aAAA;MACA,KAAAJ,aAAA,GAAAE,MAAA,CAAAM,UAAA;IACA;IACAC,iBAAA;MACA,SAAAC,eAAA;QACA,KAAAC,MAAA,CAAAC,QAAA,eACAC,IAAA;UACA,KAAAC,OAAA,CAAAC,IAAA,WACAC,KAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAArB,IAAA,mCAAAqB,GAAA;UACA;QACA;MACA;QACA,KAAAH,OAAA,CAAAC,IAAA,WACAC,KAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAArB,IAAA,mCAAAqB,GAAA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACAR,gBAAA;MACA,YAAAC,MAAA,CAAAQ,KAAA,CAAAC,GAAA,CAAAV,eAAA;IACA;IACAW,SAAA;MACA,YAAAV,MAAA,CAAAQ,KAAA,CAAAC,GAAA,CAAAC,QAAA;IACA;IACAC,YAAA;MACA,YAAAC,MAAA,CAAA1B,IAAA;IACA;IACA;IACA2B,cAAA;MACA,YAAA7B,KAAA,CAAA8B,MAAA,CAAAC,IAAA;QACA,IAAAA,IAAA,CAAA5B,YAAA,UAAAY,eAAA;QACA,IAAAgB,IAAA,CAAAC,aAAA,SAAAjB,eAAA;QACA,IAAAgB,IAAA,CAAA3B,KAAA,KAAA2B,IAAA,CAAA3B,KAAA,CAAA6B,QAAA,MAAAjB,MAAA,CAAAQ,KAAA,CAAAC,GAAA,CAAAS,IAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}