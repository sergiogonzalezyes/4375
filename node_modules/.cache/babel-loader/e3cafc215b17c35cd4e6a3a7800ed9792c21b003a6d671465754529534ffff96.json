{"ast":null,"code":"// router/index.js\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from '@/store/app';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('@/views/LoginView.vue')\n}, {\n  path: '/dashboard',\n  name: 'Dashboard',\n  component: () => import('@/views/DashboardView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/notifications',\n  name: 'Notifications',\n  component: () => import('@/views/NotificationsView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n},\n// Fallback route redirects any unmatched routes to '/login'\n{\n  path: '/:pathMatch(.*)*',\n  redirect: '/login'\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\n// Navigation guard to check authentication\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.state.isAuthenticated;\n\n  // If the route requires authentication and the user isn't authenticated, redirect to login\n  if (to.matched.some(record => record.meta.requiresAuth) && !isAuthenticated) {\n    next('/login');\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","use","routes","path","name","component","meta","requiresAuth","redirect","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","isAuthenticated","state","matched","some","record"],"sources":["/Users/sergiogonzalez/Desktop/test/frontend/src/router/index.js"],"sourcesContent":["// router/index.js\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from '@/store/app';\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('@/views/LoginView.vue'),\n  },\n  {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: () => import('@/views/DashboardView.vue'),\n    meta: { requiresAuth: true },\n  },\n  {\n    path: '/notifications',\n    name: 'Notifications',\n    component: () => import('@/views/NotificationsView.vue'),\n    meta: { requiresAuth: true },\n  },\n  // Fallback route redirects any unmatched routes to '/login'\n  {\n    path: '/:pathMatch(.*)*',\n    redirect: '/login',\n  },\n];\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes,\n});\n\n// Navigation guard to check authentication\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.state.isAuthenticated;\n\n  // If the route requires authentication and the user isn't authenticated, redirect to login\n  if (to.matched.some((record) => record.meta.requiresAuth) && !isAuthenticated) {\n    next('/login');\n  } else {\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,aAAa;AAE/BF,GAAG,CAACG,GAAG,CAACF,SAAS,CAAC;AAElB,MAAMG,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,uBAAuB;AACjD,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B,CAAC;EACpDC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEJ,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,+BAA+B,CAAC;EACxDC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC;AACD;AACA;EACEJ,IAAI,EAAE,kBAAkB;EACxBK,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMC,MAAM,GAAG,IAAIV,SAAS,CAAC;EAC3BW,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BZ;AACF,CAAC,CAAC;;AAEF;AACAO,MAAM,CAACM,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,eAAe,GAAGnB,KAAK,CAACoB,KAAK,CAACD,eAAe;;EAEnD;EACA,IAAIH,EAAE,CAACK,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACjB,IAAI,CAACC,YAAY,CAAC,IAAI,CAACY,eAAe,EAAE;IAC7ED,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}